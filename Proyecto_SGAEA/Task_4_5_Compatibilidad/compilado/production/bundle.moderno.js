(()=>{"use strict";class a{constructor(a,t,e,s,r,i){if(this._calle=a,this._numero=t,this._piso=e,!/^\d{5}$/.test(s))throw new Error("El código postal debe tener exactamente 5 dígitos.");this._codPostal=s,this._provincia=r,this._localidad=i}toString(){return`${this._calle}, ${this._numero}, ${this._piso}, ${this._localidad}, ${this._provincia} (${this._codPostal})`}}class t{#a;constructor(a,t,e,s){this.#a=a,this._nombre=t,this._edad=e,this._direccion=s}get id(){return this.#a}get nombre(){return this._nombre}toString(){return`ID: ${this.#a}, Nombre: ${this.nombre}, Edad: ${this._edad}, Dirección: ${this._direccion}`}}class e extends t{#t;constructor(a,t,e,s){super(a,t,e,s),this.#t=[]}get asignaturas(){return[...this.#t]}matricular(a,t,e){try{const s=t.buscarAsignaturaPorNombre(a,e);if(this.#t.some((a=>a.asignatura===s)))throw new Error(`El estudiante ya está matriculado en ${s.nombre}.`);this.#t.push({asignatura:s,fechaMatricula:(new Date).toLocaleDateString("es-ES")}),s.agregarEstudiante(this),console.log(`Estudiante ${this.nombre} matriculado en ${s.nombre}.`)}catch(a){console.error("Error en la matriculación:",a.message)}}desmatricular(a,t,e){try{const s=t.buscarAsignaturaPorNombre(a,e),r=this.#t.findIndex((a=>a.asignatura===s));if(-1===r)throw new Error(`El estudiante no está matriculado en ${s.nombre}.`);this.#t.splice(r,1),s.eliminarEstudiante(this),console.log(`Estudiante ${this.nombre} desmatriculado de ${s.nombre}.`)}catch(a){console.error("Error en la desmatriculación:",a.message)}}promedioIndividual(){try{if(0===this.#t.length)throw new Error("El estudiante no tiene asignaturas matriculadas.");const a=this.#t.flatMap((a=>a.asignatura.obtenerNotas(this)));if(0===a.length)throw new Error("No hay calificaciones disponibles.");return(a.reduce(((a,t)=>a+t),0)/a.length).toFixed(2)}catch(a){console.error("Error al calcular promedio:",a.message)}}mostrarAsignaturas(){console.log(`Asignaturas de ${this.nombre}:`),this.#t.forEach((a=>console.log(`- ${a.asignatura.nombre}`)))}toString(){return`${super.toString()}, ${this.#t.length>0?`Asignaturas matriculadas: ${this.#t.length}`:"No tiene asignaturas matriculadas."}`}}class s{constructor(a){this.nombre=a,this.listaEstudiantes=[],this.calificaciones=[]}agregarEstudiante(a){a&&a.nombre?this.listaEstudiantes.some((t=>t.id===a.id))?console.log(`El estudiante ${a.nombre} ya está matriculado en ${this.nombre}.`):(this.listaEstudiantes.push(a),this.calificaciones.push({estudiante:a,calificaciones:[]}),console.log(`Estudiante ${a.nombre} agregado a la asignatura ${this.nombre}.`)):console.error("El estudiante no tiene un nombre válido.")}asignarNota(a,t,e){try{const s=e.buscarEstudiantePorNombre(a);if(!s)throw new Error(`Estudiante ${a} no encontrado.`);if(!this.listaEstudiantes.some((a=>a.id===s.id)))throw new Error(`El estudiante ${s.nombre} no está matriculado en ${this.nombre}.`);if(isNaN(t)||t<0||t>10)throw new Error("Nota inválida. Debe estar entre 0 y 10.");this.calificaciones.find((a=>a.estudiante.id===s.id)).calificaciones.push(t),console.log(`Nota ${t} asignada a ${s.nombre} en ${this.nombre}.`)}catch(a){console.error("Error al asignar nota:",a.message)}}obtenerNotas(a){const t=this.calificaciones.find((t=>t.estudiante.id===a.id));return t?t.calificaciones:[]}calcularPromedio(){const a=this.calificaciones.flatMap((a=>a.calificaciones));return a.length?(a.reduce(((a,t)=>a+t),0)/a.length).toFixed(2):"No hay calificaciones disponibles."}mostrarEstudiantes(){console.log(`Estudiantes matriculados en ${this.nombre}:`),this.listaEstudiantes.forEach((a=>console.log(`- ${a.nombre}`)))}eliminarEstudiante(a){this.listaEstudiantes=this.listaEstudiantes.filter((t=>t.id!==a.id)),this.calificaciones=this.calificaciones.filter((t=>t.estudiante.id!==a.id)),console.log(`Estudiante ${a.nombre} eliminado de la asignatura ${this.nombre}.`)}toString(){return`Asignatura: ${this.nombre}, Estudiantes matriculados: ${this.listaEstudiantes.length}`}}const r=new class{constructor(){this.listaEstudiantes={},this.idActual=1}agregarEstudiante(a,t,s){const r=new e(this.idActual,a,t,s);this.listaEstudiantes[this.idActual]=r,console.log(`Estudiante ${a} añadido con éxito.`),this.idActual++}eliminarEstudiante(a){try{if(isNaN(a))throw new Error("ID inválido. Por favor, introduce un número válido.");const t=this.listaEstudiantes[a];if(!t)throw new Error(`No se encontró un estudiante con ID ${a}.`);t.asignaturas.forEach((a=>{a.asignatura.eliminarEstudiante(t)})),delete this.listaEstudiantes[a],console.log(`Estudiante con ID ${a} eliminado y desmatriculado de todas las asignaturas.`)}catch(a){console.error("Error al eliminar estudiante:",a.message)}}mostrarEstudiantes(){try{const a=Object.values(this.listaEstudiantes);if(0===a.length)throw new Error("No hay estudiantes registrados.");console.log("Lista de estudiantes:"),a.forEach((a=>{console.log(a.toString()),a.mostrarAsignaturas()}))}catch(a){console.error("Error al mostrar estudiantes:",a.message)}}promedioGeneral(){try{const a=Object.values(this.listaEstudiantes);if(0===a.length)throw new Error("No hay estudiantes registrados.");const t=a.map((a=>parseFloat(a.promedioIndividual()))).filter((a=>!isNaN(a)));if(0===t.length)throw new Error("No hay promedios disponibles para calcular.");return(t.reduce(((a,t)=>a+t),0)/t.length).toFixed(2)}catch(a){console.error("Error al calcular promedio general de todos los estudiantes:",a.message)}}buscarAsignaturaPorNombre(a,t){const e=t.find((t=>t.nombre===a));if(!e)throw new Error(`Asignatura '${a}' no encontrada.`);return e}buscarEstudiantePorNombre(a){try{const t=Object.values(this.listaEstudiantes).filter((t=>t.nombre&&t.nombre.toLowerCase().trim().includes(a.toLowerCase().trim())));return 0===t.length?(console.error(`No se encontraron estudiantes con el nombre: '${a}'`),null):t.length>1?(console.log("Se encontraron múltiples estudiantes:"),t.forEach((a=>console.log(a.toString()))),console.error("Por favor, especifica un nombre más preciso."),null):t[0]}catch(a){return console.error("Error en la búsqueda del estudiante:",a.message),null}}},i=[];!function(){console.log("Añadiendo datos de prueba..."),console.log("-----------------------------------------------------------");const t=new a("Calle Primavera",15,"2A","28010","Madrid","Madrid"),e=new a("Calle Invierno",22,"3B","18012","Granada","Granada"),n=new a("Calle Verano",5,"1C","41013","Sevilla","Sevilla");r.agregarEstudiante("Daniel",20,t),r.agregarEstudiante("Ana",22,e),r.agregarEstudiante("Carlos",21,n);const o=r.listaEstudiantes[1],l=r.listaEstudiantes[2],c=r.listaEstudiantes[3],d=new s("Matemáticas"),u=new s("Física"),m=new s("Literatura");i.push(d,u,m),o.matricular("Matemáticas",r,i),o.matricular("Física",r,i),l.matricular("Matemáticas",r,i),l.matricular("Literatura",r,i),c.matricular("Física",r,i),c.matricular("Literatura",r,i),d.asignarNota("Daniel",8,r),d.asignarNota("Ana",9,r),u.asignarNota("Daniel",7,r),u.asignarNota("Carlos",6,r),m.asignarNota("Ana",9,r),m.asignarNota("Carlos",7,r),console.log("Datos inicializados correctamente."),console.log("-----------------------------------------------------------")}(),function(){let a=!0;for(;a;)switch(console.log("=== Menú Principal ===\n1. Añadir estudiante\n2. Eliminar estudiante\n3. Mostrar estudiantes\n4. Añadir asignatura\n5. Mostrar asignaturas\n6. Matricular estudiante en asignatura\n7. Desmatricular estudiante de asignatura\n8. Asignar nota a un estudiante\n9. Calcular promedio de un estudiante\n10. Calcular promedio general de estudiantes\n0. Salir\nEscribe tu opción en la consola y presiona Enter: \n-----------------------------------------------------------\n"),prompt("Introduce una opción:")){case"1":const t=prompt("Nombre del estudiante:"),e=parseInt(prompt("Edad del estudiante:"),10),n=prompt("Dirección del estudiante:");r.agregarEstudiante(t,e,n);break;case"2":const o=parseInt(prompt("ID del estudiante a eliminar:"),10);r.eliminarEstudiante(o);break;case"3":r.mostrarEstudiantes();break;case"4":const l=prompt("Nombre de la asignatura:");i.push(new s(l)),console.log(`Asignatura ${l} añadida con éxito.`);break;case"5":console.log("Lista de asignaturas:"),i.forEach((a=>console.log(`Asignatura: ${a.nombre}, Estudiantes matriculados: ${a.listaEstudiantes.length}`)));break;case"6":const c=prompt("Introduce el nombre del estudiante:"),d=r.buscarEstudiantePorNombre(c);if(d){const a=prompt("Introduce el nombre de la asignatura:");d.matricular(a,r,i)}break;case"7":const u=prompt("Introduce el nombre del estudiante que desea desmatricular:"),m=r.buscarEstudiantePorNombre(u);if(m){const a=prompt("Introduce el nombre de la asignatura de la que se desea desmatricular al estudiante:");m.desmatricular(a,r,i)}break;case"8":const g=prompt("Nombre del estudiante:"),h=prompt("Nombre de la asignatura:"),E=parseFloat(prompt("Introduce la nota (0-10):")),b=r.buscarAsignaturaPorNombre(h,i);b&&b.asignarNota(g,E,r);break;case"9":const p=parseInt(prompt("ID del estudiante:"),10),f=r.listaEstudiantes[p],$=f.promedioIndividual();console.log(`El promedio de ${f.nombre} es: ${$}`);break;case"10":const w=r.promedioGeneral();console.log(`Promedio general de todos los estudiantes: ${w}`);break;case"0":console.log("Saliendo del programa..."),a=!1;break;default:console.log("Opción no válida. Por favor, introduce un número entre 0 y 10.")}}()})();