/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/Asignatura.js":
/*!**************************!*\
  !*** ./js/Asignatura.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Asignatura: () => (/* binding */ Asignatura)\n/* harmony export */ });\n/* harmony import */ var _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Estudiante.js */ \"./js/Estudiante.js\");\n\r\n\r\n/**\r\n * Clase que representa una asignatura.\r\n * @class\r\n */\r\nclass Asignatura {\r\n    /**\r\n     * Crea una instancia de Asignatura.\r\n     * @param {string} nombre - Nombre de la asignatura.\r\n     */\r\n    constructor(nombre) {\r\n        this.nombre = nombre;\r\n        this.listaEstudiantes = [];\r\n        this.calificaciones = [];\r\n    }\r\n\r\n    /**\r\n     * Agrega un estudiante a la asignatura e inicializa su registro de calificaciones.\r\n     * @param {Estudiante} estudiante - Estudiante a agregar.\r\n     */\r\n    agregarEstudiante(estudiante) {\r\n        if (!estudiante || !estudiante.nombre) {\r\n            console.error(\"El estudiante no tiene un nombre válido.\");\r\n            return;\r\n        }\r\n\r\n        if (!this.listaEstudiantes.some(e => e.id === estudiante.id)) {\r\n            this.listaEstudiantes.push(estudiante);\r\n            this.calificaciones.push({ estudiante, calificaciones: [] });\r\n            console.log(`Estudiante ${estudiante.nombre} agregado a la asignatura ${this.nombre}.`);\r\n        } else {\r\n            console.log(`El estudiante ${estudiante.nombre} ya está matriculado en ${this.nombre}.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asigna una nota a un estudiante en la asignatura.\r\n     * @param {string} nombreEstudiante - Nombre del estudiante al que asignar la nota.\r\n     * @param {number} nota - Nota a asignar (valor entre 0 y 10).\r\n     * @param {ListaEstudiantes} listaEstudiantesObj - Objeto que gestiona la lista de estudiantes.\r\n     * @throws {Error} Si el estudiante no está matriculado en la asignatura o la nota es inválida.\r\n     */\r\n    asignarNota(nombreEstudiante, nota, listaEstudiantesObj) {\r\n        try {\r\n            const estudiante = listaEstudiantesObj.buscarEstudiantePorNombre(nombreEstudiante);\r\n            if (!estudiante) throw new Error(`Estudiante ${nombreEstudiante} no encontrado.`);\r\n\r\n            if (!this.listaEstudiantes.some(e => e.id === estudiante.id)) {\r\n                throw new Error(`El estudiante ${estudiante.nombre} no está matriculado en ${this.nombre}.`);\r\n            }\r\n\r\n            if (isNaN(nota) || nota < 0 || nota > 10) {\r\n                throw new Error(\"Nota inválida. Debe estar entre 0 y 10.\");\r\n            }\r\n\r\n            const registro = this.calificaciones.find(c => c.estudiante.id === estudiante.id);\r\n            registro.calificaciones.push(nota);\r\n            console.log(`Nota ${nota} asignada a ${estudiante.nombre} en ${this.nombre}.`);\r\n        } catch (error) {\r\n            console.error(\"Error al asignar nota:\", error.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtiene las notas de un estudiante en la asignatura.\r\n     * @param {Estudiante} estudiante - Estudiante cuyas notas se desean obtener.\r\n     * @returns {Array} Lista de calificaciones del estudiante.\r\n     */\r\n    obtenerNotas(estudiante) {\r\n        const registro = this.calificaciones.find(c => c.estudiante.id === estudiante.id);\r\n        return registro ? registro.calificaciones : [];\r\n    }\r\n\r\n    /**\r\n     * Calcula el promedio de todas las calificaciones de la asignatura.\r\n     * @returns {string} Promedio de las calificaciones o mensaje si no hay calificaciones.\r\n     */\r\n    calcularPromedio() {\r\n        const todasLasNotas = this.calificaciones.flatMap(c => c.calificaciones);\r\n        return todasLasNotas.length\r\n            ? (todasLasNotas.reduce((sum, val) => sum + val, 0) / todasLasNotas.length).toFixed(2)\r\n            : \"No hay calificaciones disponibles.\";\r\n    }\r\n\r\n    /**\r\n     * Muestra en consola los estudiantes matriculados en la asignatura.\r\n     */\r\n    mostrarEstudiantes() {\r\n        console.log(`Estudiantes matriculados en ${this.nombre}:`);\r\n        this.listaEstudiantes.forEach(est => console.log(`- ${est.nombre}`));\r\n    }\r\n    \r\n    /**\r\n     * Elimina un estudiante de la asignatura y sus calificaciones.\r\n     * @param {Estudiante} estudiante - Estudiante a eliminar.\r\n     */\r\n    eliminarEstudiante(estudiante) {\r\n        this.listaEstudiantes = this.listaEstudiantes.filter(e => e.id !== estudiante.id);\r\n        this.calificaciones = this.calificaciones.filter(c => c.estudiante.id !== estudiante.id);\r\n        console.log(`Estudiante ${estudiante.nombre} eliminado de la asignatura ${this.nombre}.`);\r\n    }\r\n\r\n    /**\r\n     * Devuelve la representación en cadena de la asignatura.\r\n     * @returns {string} Representación en cadena de la asignatura.\r\n     */\r\n    toString() {\r\n        return `Asignatura: ${this.nombre}, Estudiantes matriculados: ${this.listaEstudiantes.length}`;\r\n    }\r\n}\n\n//# sourceURL=webpack://main/./js/Asignatura.js?");

/***/ }),

/***/ "./js/Direccion.js":
/*!*************************!*\
  !*** ./js/Direccion.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Direccion: () => (/* binding */ Direccion)\n/* harmony export */ });\n/**\r\n * Clase que representa una dirección.\r\n * @class\r\n */\r\nclass Direccion {\r\n    /**\r\n * Crea una instancia de Direccion.\r\n * @param {string} calle - Nombre de la calle.\r\n * @param {number} numero - Número de la dirección.\r\n * @param {string} piso - Piso o apartamento.\r\n * @param {string} codPostal - Código postal (5 dígitos).\r\n * @param {string} provincia - Provincia de la dirección.\r\n * @param {string} localidad - Localidad de la dirección.\r\n * @throws {Error} Si el código postal no tiene exactamente 5 dígitos.\r\n */\r\n    constructor(calle, numero, piso, codPostal, provincia, localidad) {\r\n        this._calle = calle;\r\n        this._numero = numero;\r\n        this._piso = piso;\r\n\r\n        if (!/^\\d{5}$/.test(codPostal)) {\r\n            throw new Error(\"El código postal debe tener exactamente 5 dígitos.\");\r\n        }\r\n        this._codPostal = codPostal;\r\n        this._provincia = provincia;\r\n        this._localidad = localidad;\r\n    }\r\n\r\n    /**\r\n     * Devuelve la representación en cadena de la dirección.\r\n     * @returns {string} Representación en cadena de la dirección.\r\n     */\r\n    toString() {\r\n        return `${this._calle}, ${this._numero}, ${this._piso}, ${this._localidad}, ${this._provincia} (${this._codPostal})`;\r\n    }\r\n}\n\n//# sourceURL=webpack://main/./js/Direccion.js?");

/***/ }),

/***/ "./js/Estudiante.js":
/*!**************************!*\
  !*** ./js/Estudiante.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Estudiante: () => (/* binding */ Estudiante)\n/* harmony export */ });\n/* harmony import */ var _Persona_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Persona.js */ \"./js/Persona.js\");\n/* harmony import */ var _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asignatura.js */ \"./js/Asignatura.js\");\n\r\n\r\n\r\n/**\r\n * Clase que representa a un estudiante.\r\n * @extends Persona\r\n * @class\r\n */\r\nclass Estudiante extends _Persona_js__WEBPACK_IMPORTED_MODULE_0__.Persona {\r\n\r\n    #asignaturas;\r\n\r\n    /**\r\n     * Crea una instancia de Estudiante.\r\n     * @param {number} id - Identificador único del estudiante.\r\n     * @param {string} nombre - Nombre del estudiante.\r\n     * @param {number} edad - Edad del estudiante.\r\n     * @param {Direccion} direccion - Dirección del estudiante.\r\n     */\r\n    constructor(id, nombre, edad, direccion) {\r\n        super(id, nombre, edad, direccion);\r\n        this.#asignaturas = [];\r\n    }\r\n\r\n    /**\r\n     * Obtiene las asignaturas en las que el estudiante está matriculado.\r\n     * @returns {Array} Lista de asignaturas.\r\n     */\r\n    get asignaturas() {\r\n        return [...this.#asignaturas];\r\n    }\r\n\r\n    /**\r\n     * Matricula al estudiante en una asignatura.\r\n     * @param {string} nombreAsignatura - Nombre de la asignatura en la que matricular al estudiante.\r\n     * @param {ListaEstudiantes} listaEstudiantes - Objeto que gestiona la lista de estudiantes.\r\n     * @param {Array<Asignatura>} asignaturasDisponibles - Lista de asignaturas disponibles en el sistema.\r\n     * @throws {Error} Si el estudiante ya está matriculado en la asignatura.\r\n     */\r\n    matricular(nombreAsignatura, listaEstudiantes, asignaturasDisponibles) {\r\n        try {\r\n            const asignatura = listaEstudiantes.buscarAsignaturaPorNombre(nombreAsignatura, asignaturasDisponibles);\r\n\r\n            if (!this.#asignaturas.some(a => a.asignatura === asignatura)) {\r\n                this.#asignaturas.push({ asignatura, fechaMatricula: new Date().toLocaleDateString(\"es-ES\") });\r\n                asignatura.agregarEstudiante(this);\r\n                console.log(`Estudiante ${this.nombre} matriculado en ${asignatura.nombre}.`);\r\n            } else {\r\n                throw new Error(`El estudiante ya está matriculado en ${asignatura.nombre}.`);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error en la matriculación:\", error.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Desmatricula al estudiante de una asignatura.\r\n     * @param {string} nombreAsignatura - Nombre de la asignatura de la que desmatricular al estudiante.\r\n     * @param {ListaEstudiantes} listaEstudiantes - Objeto que gestiona la lista de estudiantes.\r\n     * @param {Array<Asignatura>} asignaturasDisponibles - Lista de asignaturas disponibles en el sistema.\r\n     * @throws {Error} Si el estudiante no está matriculado en la asignatura.\r\n     */\r\n    desmatricular(nombreAsignatura, listaEstudiantes, asignaturasDisponibles) {\r\n        try {\r\n            const asignatura = listaEstudiantes.buscarAsignaturaPorNombre(nombreAsignatura, asignaturasDisponibles);\r\n\r\n            const index = this.#asignaturas.findIndex(a => a.asignatura === asignatura);\r\n\r\n            if (index !== -1) {\r\n                this.#asignaturas.splice(index, 1);\r\n                asignatura.eliminarEstudiante(this);\r\n                console.log(`Estudiante ${this.nombre} desmatriculado de ${asignatura.nombre}.`);\r\n            } else {\r\n                throw new Error(`El estudiante no está matriculado en ${asignatura.nombre}.`);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error en la desmatriculación:\", error.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calcula el promedio de todas las asignaturas en las que el estudiante está matriculado.\r\n     * @returns {string} Promedio de las calificaciones.\r\n     * @throws {Error} Si el estudiante no tiene asignaturas matriculadas o no hay calificaciones.\r\n     */\r\n    promedioIndividual() {\r\n        try {\r\n            if (this.#asignaturas.length === 0) throw new Error(\"El estudiante no tiene asignaturas matriculadas.\");\r\n            const notas = this.#asignaturas.flatMap(a => a.asignatura.obtenerNotas(this));\r\n            if (notas.length === 0) throw new Error(\"No hay calificaciones disponibles.\");\r\n\r\n            const promedio = (notas.reduce((sum, val) => sum + val, 0) / notas.length).toFixed(2);\r\n            \r\n            return promedio;\r\n        } catch (error) {\r\n            console.error(\"Error al calcular promedio:\", error.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Muestra en consola las asignaturas en las que el estudiante está matriculado.\r\n     */\r\n    mostrarAsignaturas() {\r\n        console.log(`Asignaturas de ${this.nombre}:`);\r\n        this.#asignaturas.forEach(a => console.log(`- ${a.asignatura.nombre}`));\r\n    }\r\n\r\n    /**\r\n     * Devuelve la representación en cadena del estudiante.\r\n     * @returns {string} Representación en cadena del estudiante.\r\n     */\r\n    toString() {\r\n        return `${super.toString()}, ${this.#asignaturas.length > 0 ? `Asignaturas matriculadas: ${this.#asignaturas.length}` : \"No tiene asignaturas matriculadas.\"}`;\r\n    }\r\n}\n\n//# sourceURL=webpack://main/./js/Estudiante.js?");

/***/ }),

/***/ "./js/ListaEstudiantes.js":
/*!********************************!*\
  !*** ./js/ListaEstudiantes.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListaEstudiantes: () => (/* binding */ ListaEstudiantes)\n/* harmony export */ });\n/* harmony import */ var _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Estudiante.js */ \"./js/Estudiante.js\");\n\r\n\r\n/**\r\n * Clase que administra una lista de estudiantes.\r\n * @class\r\n */\r\nclass ListaEstudiantes {\r\n    /**\r\n     * Crea una instancia de ListaEstudiantes.\r\n     */\r\n    constructor() {\r\n        this.listaEstudiantes = {};\r\n        this.idActual = 1;\r\n    }\r\n\r\n    /**\r\n     * Agrega un nuevo estudiante a la lista.\r\n     * @param {string} nombre - Nombre del estudiante.\r\n     * @param {number} edad - Edad del estudiante.\r\n     * @param {Direccion} direccion - Dirección del estudiante.\r\n     */\r\n    agregarEstudiante(nombre, edad, direccion) {\r\n        const nuevoEstudiante = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(this.idActual, nombre, edad, direccion);\r\n        this.listaEstudiantes[this.idActual] = nuevoEstudiante;\r\n        console.log(`Estudiante ${nombre} añadido con éxito.`);\r\n        this.idActual++;\r\n    }\r\n\r\n    /**\r\n     * Elimina un estudiante de la lista por su ID.\r\n     * @param {number} id - ID del estudiante a eliminar.\r\n     * @throws {Error} Si el ID no es válido o el estudiante no existe.\r\n     */\r\n    eliminarEstudiante(id) {\r\n        try {\r\n            if (isNaN(id)) throw new Error(\"ID inválido. Por favor, introduce un número válido.\");\r\n            const estudiante = this.listaEstudiantes[id];\r\n            if (!estudiante) throw new Error(`No se encontró un estudiante con ID ${id}.`);\r\n\r\n            estudiante.asignaturas.forEach(a => {\r\n                a.asignatura.eliminarEstudiante(estudiante);\r\n            });\r\n\r\n            delete this.listaEstudiantes[id];\r\n            console.log(`Estudiante con ID ${id} eliminado y desmatriculado de todas las asignaturas.`);\r\n        } catch (error) {\r\n            console.error(\"Error al eliminar estudiante:\", error.message);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Muestra en consola todos los estudiantes registrados.\r\n     * @throws {Error} Si no hay estudiantes registrados.\r\n     */\r\n    mostrarEstudiantes() {\r\n        try {\r\n            const estudiantes = Object.values(this.listaEstudiantes);\r\n            if (estudiantes.length === 0) throw new Error(\"No hay estudiantes registrados.\");\r\n\r\n            console.log(\"Lista de estudiantes:\");\r\n            estudiantes.forEach(est => {\r\n                console.log(est.toString());\r\n                est.mostrarAsignaturas();\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error al mostrar estudiantes:\", error.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calcula el promedio general de todos los estudiantes.\r\n     * @returns {string} Promedio general de calificaciones.\r\n     * @throws {Error} Si no hay estudiantes o calificaciones disponibles.\r\n     */\r\n    promedioGeneral() {\r\n        try {\r\n            const estudiantesArray = Object.values(this.listaEstudiantes);\r\n            if (estudiantesArray.length === 0) throw new Error(\"No hay estudiantes registrados.\");\r\n\r\n            const promedios = estudiantesArray.map(est => parseFloat(est.promedioIndividual())).filter(p => !isNaN(p));\r\n            if (promedios.length === 0) throw new Error(\"No hay promedios disponibles para calcular.\");\r\n\r\n            const promedioGeneral = (promedios.reduce((sum, val) => sum + val, 0) / promedios.length).toFixed(2);\r\n            return promedioGeneral;\r\n        } catch (error) {\r\n            console.error(\"Error al calcular promedio general de todos los estudiantes:\", error.message);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Busca una asignatura por su nombre en la lista de asignaturas disponibles.\r\n     * @param {string} nombreAsignatura - Nombre de la asignatura a buscar.\r\n     * @param {Array<Asignatura>} asignaturasDisponibles - Lista de asignaturas disponibles.\r\n     * @returns {Asignatura} Asignatura encontrada.\r\n     * @throws {Error} Si la asignatura no se encuentra en la lista.\r\n     * @throws {Error} Si no se proporciona un nombre de asignatura válido.\r\n     * @throws {Error} Si no hay asignaturas disponibles.\r\n     * @throws {Error} Si no se proporciona una lista de asignaturas.\r\n     **/\r\n    buscarAsignaturaPorNombre(nombreAsignatura, asignaturasDisponibles) {\r\n        const asignatura = asignaturasDisponibles.find(a => a.nombre === nombreAsignatura);\r\n        if (!asignatura) {\r\n            throw new Error(`Asignatura '${nombreAsignatura}' no encontrada.`);\r\n        }\r\n        return asignatura;\r\n    }\r\n\r\n    /**\r\n     * Busca un estudiante por su nombre.\r\n     * @param {string} patron - Patrón o nombre a buscar.\r\n     * @returns {Estudiante|null} Estudiante encontrado o null si no se encuentra.\r\n     */\r\n    buscarEstudiantePorNombre(patron) {\r\n        try {\r\n            // Imprime la lista de estudiantes para verificar que está correctamente cargada\r\n    \r\n            // Convierte la lista de estudiantes en un array y filtra aquellos cuyo nombre coincide con el patrón\r\n            const resultados = Object.values(this.listaEstudiantes).filter(est =>\r\n                est.nombre && est.nombre.toLowerCase().trim().includes(patron.toLowerCase().trim())\r\n            );\r\n            \r\n    \r\n            // Si no se encuentran coincidencias, muestra un mensaje de error y devuelve null\r\n            if (resultados.length === 0) {\r\n                console.error(`No se encontraron estudiantes con el nombre: '${patron}'`);\r\n                return null;\r\n            } else if (resultados.length > 1) {\r\n                // Si hay múltiples coincidencias, muestra los resultados y un mensaje de error\r\n                console.log(\"Se encontraron múltiples estudiantes:\");\r\n                resultados.forEach(est => console.log(est.toString()));\r\n                console.error(\"Por favor, especifica un nombre más preciso.\");\r\n                return null;\r\n            }\r\n    \r\n            // Devuelve el estudiante encontrado si solo hay uno\r\n            return resultados[0];\r\n        } catch (error) {\r\n            // Maneja internamente cualquier error ocurrido durante la búsqueda\r\n            console.error(\"Error en la búsqueda del estudiante:\", error.message);\r\n            return null;\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://main/./js/ListaEstudiantes.js?");

/***/ }),

/***/ "./js/Persona.js":
/*!***********************!*\
  !*** ./js/Persona.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Persona: () => (/* binding */ Persona)\n/* harmony export */ });\n/**\r\n * Clase que representa una persona.\r\n * @class\r\n */\r\nclass Persona {\r\n    /**\r\n     * Crea una instancia de Persona.\r\n     * @param {number} id - Identificador único de la persona.\r\n     * @param {string} nombre - Nombre de la persona.\r\n     * @param {number} edad - Edad de la persona.\r\n     * @param {Direccion} direccion - Dirección de la persona.\r\n     */\r\n\r\n    #id;\r\n\r\n    constructor(id, nombre, edad, direccion) {\r\n        this.#id = id;\r\n        this._nombre = nombre;\r\n        this._edad = edad;\r\n        this._direccion = direccion;\r\n    }\r\n\r\n    /**\r\n     * Obtiene el ID de la persona.\r\n     * @returns {number} ID de la persona.\r\n     */\r\n    get id() {\r\n        return this.#id;\r\n    }\r\n\r\n    /**\r\n     * Obtiene el nombre de la persona.\r\n     * @returns {string} Nombre de la persona.\r\n     */\r\n    get nombre() {\r\n        return this._nombre;\r\n    }\r\n\r\n    /**\r\n     * Devuelve la representación en cadena de la persona.\r\n     * @returns {string} Representación en cadena de la persona.\r\n     */\r\n    toString() {\r\n        return `ID: ${this.#id}, Nombre: ${this.nombre}, Edad: ${this._edad}, Dirección: ${this._direccion}`;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://main/./js/Persona.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Direccion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Direccion.js */ \"./js/Direccion.js\");\n/* harmony import */ var _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asignatura.js */ \"./js/Asignatura.js\");\n/* harmony import */ var _Estudiante_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Estudiante.js */ \"./js/Estudiante.js\");\n/* harmony import */ var _ListaEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ListaEstudiantes.js */ \"./js/ListaEstudiantes.js\");\n/**\r\n * 2. Definición de Clases\r\n * \r\n * En esta parte se importan las clases Direccion, Estudiante, Asignatura, ListaEstudiantes.\r\n * Todas las clases están en sus respecitivos archivos.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Agregar estudiantes\r\nconst PlistaEstudiantes = new _ListaEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__.ListaEstudiantes();\r\n\r\n// Crear asignaturas\r\nconst asignaturas = [];\r\n/**\r\n * Inicializa datos de prueba para la aplicación.\r\n */\r\nfunction inicializarDatosPrueba() {\r\n\r\n    console.log(\"Añadiendo datos de prueba...\");\r\n    console.log(\"-----------------------------------------------------------\");\r\n    const direccion1 = new _Direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(\"Calle Primavera\", 15, \"2A\", \"28010\", \"Madrid\", \"Madrid\");\r\n    const direccion2 = new _Direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(\"Calle Invierno\", 22, \"3B\", \"18012\", \"Granada\", \"Granada\");\r\n    const direccion3 = new _Direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(\"Calle Verano\", 5, \"1C\", \"41013\", \"Sevilla\", \"Sevilla\");\r\n\r\n    PlistaEstudiantes.agregarEstudiante(\"Daniel\", 20, direccion1);\r\n    PlistaEstudiantes.agregarEstudiante(\"Ana\", 22, direccion2);\r\n    PlistaEstudiantes.agregarEstudiante(\"Carlos\", 21, direccion3);\r\n\r\n    const estudiante1 = PlistaEstudiantes.listaEstudiantes[1];\r\n    const estudiante2 = PlistaEstudiantes.listaEstudiantes[2];\r\n    const estudiante3 = PlistaEstudiantes.listaEstudiantes[3];\r\n\r\n    const matematicas = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Matemáticas\");\r\n    const fisica = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Física\");\r\n    const literatura = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Literatura\");\r\n\r\n    asignaturas.push(matematicas, fisica, literatura);\r\n\r\n    estudiante1.matricular(\"Matemáticas\", PlistaEstudiantes, asignaturas);\r\n    estudiante1.matricular(\"Física\", PlistaEstudiantes, asignaturas);\r\n    estudiante2.matricular(\"Matemáticas\", PlistaEstudiantes, asignaturas);\r\n    estudiante2.matricular(\"Literatura\", PlistaEstudiantes, asignaturas);\r\n    estudiante3.matricular(\"Física\", PlistaEstudiantes, asignaturas);\r\n    estudiante3.matricular(\"Literatura\", PlistaEstudiantes, asignaturas);\r\n\r\n\r\n    // Asignar notas a cada estudiante en sus asignaturas\r\n    matematicas.asignarNota(\"Daniel\", 8, PlistaEstudiantes);\r\n    matematicas.asignarNota(\"Ana\", 9, PlistaEstudiantes);\r\n    fisica.asignarNota(\"Daniel\", 7, PlistaEstudiantes);\r\n    fisica.asignarNota(\"Carlos\", 6, PlistaEstudiantes);\r\n    literatura.asignarNota(\"Ana\", 9, PlistaEstudiantes);\r\n    literatura.asignarNota(\"Carlos\", 7, PlistaEstudiantes);\r\n\r\n\r\n    console.log(\"Datos inicializados correctamente.\");\r\n    console.log(\"-----------------------------------------------------------\");\r\n}\r\n\r\ninicializarDatosPrueba();\r\n\r\n\r\n/**\r\n * Programa principal que muestra el menú y gestiona las interacciones.\r\n */\r\nfunction programa() {\r\n    let continuar = true;\r\n\r\n    while (continuar) {\r\n        // Mostrar Menú\r\n        console.log(\r\n            `=== Menú Principal ===\\n` +\r\n            `1. Añadir estudiante\\n` +\r\n            `2. Eliminar estudiante\\n` +\r\n            `3. Mostrar estudiantes\\n` +\r\n            `4. Añadir asignatura\\n` +\r\n            `5. Mostrar asignaturas\\n` +\r\n            `6. Matricular estudiante en asignatura\\n` +\r\n            `7. Desmatricular estudiante de asignatura\\n` +\r\n            `8. Asignar nota a un estudiante\\n` +\r\n            `9. Calcular promedio de un estudiante\\n` +\r\n            `10. Calcular promedio general de estudiantes\\n` +\r\n            `0. Salir\\n` +\r\n            `Escribe tu opción en la consola y presiona Enter: \\n`+\r\n            `-----------------------------------------------------------\\n`\r\n        );\r\n\r\n        const opcion = prompt(\"Introduce una opción:\");\r\n\r\n        switch (opcion) {\r\n            \r\n            case \"1\": \r\n                 /**\r\n                 * Añade un nuevo estudiante solicitando nombre, edad y dirección.\r\n                 */\r\n                const nombre = prompt(\"Nombre del estudiante:\");\r\n                const edad = parseInt(prompt(\"Edad del estudiante:\"), 10);\r\n                const direccion = prompt(\"Dirección del estudiante:\");\r\n                 \r\n                PlistaEstudiantes.agregarEstudiante(nombre, edad, direccion);\r\n                \r\n                \r\n                break;\r\n\r\n            case \"2\":\r\n                /**\r\n                 * Elimina un estudiante de la lista solicitando su ID.\r\n                 */\r\n                const idEliminar = parseInt(prompt(\"ID del estudiante a eliminar:\"), 10);\r\n                PlistaEstudiantes.eliminarEstudiante(idEliminar);\r\n                break;\r\n\r\n            case \"3\":\r\n                /**\r\n                 * Muestra todos los estudiantes registrados junto con sus asignaturas.\r\n                 */\r\n                PlistaEstudiantes.mostrarEstudiantes();\r\n                break;\r\n\r\n            case \"4\": \r\n                /**\r\n                 * Añade una nueva asignatura al sistema.\r\n                 */\r\n                const nombreAsignatura = prompt(\"Nombre de la asignatura:\");\r\n                asignaturas.push(new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(nombreAsignatura));\r\n                console.log(`Asignatura ${nombreAsignatura} añadida con éxito.`);\r\n                \r\n                break;\r\n\r\n            case \"5\": \r\n                /**\r\n                 * Muestra todas las asignaturas disponibles y el número de estudiantes matriculados en cada una.\r\n                 */\r\n                console.log(\"Lista de asignaturas:\");\r\n                asignaturas.forEach(a => console.log(`Asignatura: ${a.nombre}, Estudiantes matriculados: ${a.listaEstudiantes.length}`));\r\n                \r\n                break;\r\n\r\n            case \"6\": \r\n            /**\r\n             * Matricula a un estudiante en una asignatura.\r\n             * Solicita el nombre del estudiante y de la asignatura.\r\n             */\r\n            const nombreEstudiante = prompt(\"Introduce el nombre del estudiante:\");\r\n            const estudianteMatricular = PlistaEstudiantes.buscarEstudiantePorNombre(nombreEstudiante);\r\n        \r\n            if (estudianteMatricular) {\r\n                const nombreAsignaturaMat = prompt(\"Introduce el nombre de la asignatura:\");\r\n                estudianteMatricular.matricular(nombreAsignaturaMat, PlistaEstudiantes, asignaturas);\r\n            }\r\n            break;\r\n            \r\n            case \"7\":\r\n                /**\r\n                 * Desmatricula a un estudiante de una asignatura.\r\n                 * Solicita el nombre del estudiante y de la asignatura.\r\n                 */\r\n                const nombreEstudianteDes = prompt(\"Introduce el nombre del estudiante que desea desmatricular:\");\r\n                const estudianteDesmatricular = PlistaEstudiantes.buscarEstudiantePorNombre(nombreEstudianteDes);\r\n            \r\n                if (estudianteDesmatricular) {\r\n                    const nombreAsignaturaDes = prompt(\"Introduce el nombre de la asignatura de la que se desea desmatricular al estudiante:\");\r\n                    estudianteDesmatricular.desmatricular(nombreAsignaturaDes, PlistaEstudiantes, asignaturas);\r\n                }\r\n                break;\r\n            \r\n            case \"8\":\r\n                /**\r\n                 * Asigna una nota a un estudiante en una asignatura específica.\r\n                 * Solicita el nombre del estudiante, el nombre de la asignatura y la nota.\r\n                 */\r\n                const nombreEstNota = prompt(\"Nombre del estudiante:\");\r\n                const nombreAsigNota = prompt(\"Nombre de la asignatura:\");\r\n                const nota = parseFloat(prompt(\"Introduce la nota (0-10):\"));\r\n            \r\n                const asignatura = PlistaEstudiantes.buscarAsignaturaPorNombre(nombreAsigNota, asignaturas);\r\n                if (asignatura) {\r\n                    asignatura.asignarNota(nombreEstNota, nota, PlistaEstudiantes);\r\n                }\r\n                break;\r\n\r\n            case \"9\": \r\n                /**\r\n                 * Calcula y muestra el promedio de calificaciones de un estudiante.\r\n                 * Solicita el ID del estudiante.\r\n                 */\r\n                const idEstPromedio = parseInt(prompt(\"ID del estudiante:\"), 10);\r\n                const estudiantePromedio = PlistaEstudiantes.listaEstudiantes[idEstPromedio];\r\n\r\n\r\n                //Calculamos el promedio del estudiante\r\n                const mediaEst = estudiantePromedio.promedioIndividual();\r\n                console.log(`El promedio de ${estudiantePromedio.nombre} es: ${mediaEst}`);\r\n                break;\r\n\r\n            case \"10\": \r\n                /**\r\n                 * Calcula y muestra el promedio general de todos los estudiantes registrados.\r\n                 */\r\n                const promedioGeneral = PlistaEstudiantes.promedioGeneral();\r\n                console.log(`Promedio general de todos los estudiantes: ${promedioGeneral}`);\r\n                break;\r\n\r\n            case \"0\": \r\n                /**\r\n                 * Finaliza la ejecución del programa.\r\n                 */\r\n                console.log(\"Saliendo del programa...\");\r\n                continuar = false;\r\n                break;\r\n\r\n            default: \r\n                /**\r\n                 * Muestra un mensaje de error si la opción ingresada no es válida.\r\n                 */\r\n                console.log(\"Opción no válida. Por favor, introduce un número entre 0 y 10.\");\r\n        }\r\n    }\r\n}\r\n\r\n// Ejecutar el programa\r\nprograma();\n\n//# sourceURL=webpack://main/./js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/main.js");
/******/ 	
/******/ })()
;